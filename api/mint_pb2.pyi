"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import api.taprootassets_pb2 as taprootassets_pb2
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _BatchState:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _BatchStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_BatchState.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    BATCH_STATE_UNKNOWN: _BatchState.ValueType  # 0
    BATCH_STATE_PEDNING: _BatchState.ValueType  # 1
    BATCH_STATE_FROZEN: _BatchState.ValueType  # 2
    BATCH_STATE_COMMITTED: _BatchState.ValueType  # 3
    BATCH_STATE_BROADCAST: _BatchState.ValueType  # 4
    BATCH_STATE_CONFIRMED: _BatchState.ValueType  # 5
    BATCH_STATE_FINALIZED: _BatchState.ValueType  # 6
    BATCH_STATE_SEEDLING_CANCELLED: _BatchState.ValueType  # 7
    BATCH_STATE_SPROUT_CANCELLED: _BatchState.ValueType  # 8

class BatchState(_BatchState, metaclass=_BatchStateEnumTypeWrapper): ...

BATCH_STATE_UNKNOWN: BatchState.ValueType  # 0
BATCH_STATE_PEDNING: BatchState.ValueType  # 1
BATCH_STATE_FROZEN: BatchState.ValueType  # 2
BATCH_STATE_COMMITTED: BatchState.ValueType  # 3
BATCH_STATE_BROADCAST: BatchState.ValueType  # 4
BATCH_STATE_CONFIRMED: BatchState.ValueType  # 5
BATCH_STATE_FINALIZED: BatchState.ValueType  # 6
BATCH_STATE_SEEDLING_CANCELLED: BatchState.ValueType  # 7
BATCH_STATE_SPROUT_CANCELLED: BatchState.ValueType  # 8
global___BatchState = BatchState

@typing_extensions.final
class PendingAsset(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ASSET_VERSION_FIELD_NUMBER: builtins.int
    ASSET_TYPE_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    ASSET_META_FIELD_NUMBER: builtins.int
    AMOUNT_FIELD_NUMBER: builtins.int
    NEW_GROUPED_ASSET_FIELD_NUMBER: builtins.int
    GROUP_KEY_FIELD_NUMBER: builtins.int
    GROUP_ANCHOR_FIELD_NUMBER: builtins.int
    asset_version: taprootassets_pb2.AssetVersion.ValueType
    """The version of asset to mint."""
    asset_type: taprootassets_pb2.AssetType.ValueType
    """The type of the asset to be created."""
    name: builtins.str
    """The name, or "tag" of the asset. This will affect the final asset ID."""
    @property
    def asset_meta(self) -> taprootassets_pb2.AssetMeta:
        """
        A blob that resents metadata related to the asset. This will affect the
        final asset ID.
        """
    amount: builtins.int
    """
    The total amount of units of the new asset that should be created. If the
    AssetType is Collectible, then this field cannot be set.
    """
    new_grouped_asset: builtins.bool
    """
    If true, then the asset will be created with a new group key, which allows
    for future asset issuance.
    """
    group_key: builtins.bytes
    """The specific group key this asset should be minted with."""
    group_anchor: builtins.str
    """
    The name of the asset in the batch that will anchor a new asset group.
    This asset will be minted with the same group key as the anchor asset.
    """
    def __init__(
        self,
        *,
        asset_version: taprootassets_pb2.AssetVersion.ValueType = ...,
        asset_type: taprootassets_pb2.AssetType.ValueType = ...,
        name: builtins.str = ...,
        asset_meta: taprootassets_pb2.AssetMeta | None = ...,
        amount: builtins.int = ...,
        new_grouped_asset: builtins.bool = ...,
        group_key: builtins.bytes = ...,
        group_anchor: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["asset_meta", b"asset_meta"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["amount", b"amount", "asset_meta", b"asset_meta", "asset_type", b"asset_type", "asset_version", b"asset_version", "group_anchor", b"group_anchor", "group_key", b"group_key", "name", b"name", "new_grouped_asset", b"new_grouped_asset"]) -> None: ...

global___PendingAsset = PendingAsset

@typing_extensions.final
class MintAsset(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ASSET_VERSION_FIELD_NUMBER: builtins.int
    ASSET_TYPE_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    ASSET_META_FIELD_NUMBER: builtins.int
    AMOUNT_FIELD_NUMBER: builtins.int
    NEW_GROUPED_ASSET_FIELD_NUMBER: builtins.int
    GROUPED_ASSET_FIELD_NUMBER: builtins.int
    GROUP_KEY_FIELD_NUMBER: builtins.int
    GROUP_ANCHOR_FIELD_NUMBER: builtins.int
    asset_version: taprootassets_pb2.AssetVersion.ValueType
    """The version of asset to mint."""
    asset_type: taprootassets_pb2.AssetType.ValueType
    """The type of the asset to be created."""
    name: builtins.str
    """The name, or "tag" of the asset. This will affect the final asset ID."""
    @property
    def asset_meta(self) -> taprootassets_pb2.AssetMeta:
        """
        A blob that resents metadata related to the asset. This will affect the
        final asset ID.
        """
    amount: builtins.int
    """
    The total amount of units of the new asset that should be created. If the
    AssetType is Collectible, then this field cannot be set.
    """
    new_grouped_asset: builtins.bool
    """
    If true, then the asset will be created with a group key, which allows for
    future asset issuance.
    """
    grouped_asset: builtins.bool
    """
    If true, then a group key or group anchor can be set to mint this asset into
    an existing asset group.
    """
    group_key: builtins.bytes
    """The specific group key this asset should be minted with."""
    group_anchor: builtins.str
    """
    The name of the asset in the batch that will anchor a new asset group.
    This asset will be minted with the same group key as the anchor asset.
    """
    def __init__(
        self,
        *,
        asset_version: taprootassets_pb2.AssetVersion.ValueType = ...,
        asset_type: taprootassets_pb2.AssetType.ValueType = ...,
        name: builtins.str = ...,
        asset_meta: taprootassets_pb2.AssetMeta | None = ...,
        amount: builtins.int = ...,
        new_grouped_asset: builtins.bool = ...,
        grouped_asset: builtins.bool = ...,
        group_key: builtins.bytes = ...,
        group_anchor: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["asset_meta", b"asset_meta"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["amount", b"amount", "asset_meta", b"asset_meta", "asset_type", b"asset_type", "asset_version", b"asset_version", "group_anchor", b"group_anchor", "group_key", b"group_key", "grouped_asset", b"grouped_asset", "name", b"name", "new_grouped_asset", b"new_grouped_asset"]) -> None: ...

global___MintAsset = MintAsset

@typing_extensions.final
class MintAssetRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ASSET_FIELD_NUMBER: builtins.int
    SHORT_RESPONSE_FIELD_NUMBER: builtins.int
    @property
    def asset(self) -> global___MintAsset:
        """
        The asset to be minted.
        """
    short_response: builtins.bool
    """
    If true, then the assets currently in the batch won't be returned in the
    response. This is mainly to avoid a lot of data being transmitted and
    possibly printed on the command line in the case of a very large batch.
    """
    def __init__(
        self,
        *,
        asset: global___MintAsset | None = ...,
        short_response: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["asset", b"asset"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["asset", b"asset", "short_response", b"short_response"]) -> None: ...

global___MintAssetRequest = MintAssetRequest

@typing_extensions.final
class MintAssetResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PENDING_BATCH_FIELD_NUMBER: builtins.int
    @property
    def pending_batch(self) -> global___MintingBatch:
        """The pending batch the asset was added to."""
    def __init__(
        self,
        *,
        pending_batch: global___MintingBatch | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["pending_batch", b"pending_batch"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["pending_batch", b"pending_batch"]) -> None: ...

global___MintAssetResponse = MintAssetResponse

@typing_extensions.final
class MintingBatch(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BATCH_KEY_FIELD_NUMBER: builtins.int
    BATCH_TXID_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    ASSETS_FIELD_NUMBER: builtins.int
    batch_key: builtins.bytes
    """
    A public key serialized in compressed format that can be used to uniquely
    identify a pending minting batch. Responses that share the same key will be
    batched into the same minting transaction.
    """
    batch_txid: builtins.str
    """
    The transaction ID of the batch. Only populated if the batch has been
    committed.
    """
    state: global___BatchState.ValueType
    """The state of the batch."""
    @property
    def assets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PendingAsset]:
        """The assets that are part of the batch."""
    def __init__(
        self,
        *,
        batch_key: builtins.bytes = ...,
        batch_txid: builtins.str = ...,
        state: global___BatchState.ValueType = ...,
        assets: collections.abc.Iterable[global___PendingAsset] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["assets", b"assets", "batch_key", b"batch_key", "batch_txid", b"batch_txid", "state", b"state"]) -> None: ...

global___MintingBatch = MintingBatch

@typing_extensions.final
class FinalizeBatchRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SHORT_RESPONSE_FIELD_NUMBER: builtins.int
    FEE_RATE_FIELD_NUMBER: builtins.int
    short_response: builtins.bool
    """
    If true, then the assets currently in the batch won't be returned in the
    response. This is mainly to avoid a lot of data being transmitted and
    possibly printed on the command line in the case of a very large batch.
    """
    fee_rate: builtins.int
    """The optional fee rate to use for the minting transaction, in sat/kw."""
    def __init__(
        self,
        *,
        short_response: builtins.bool = ...,
        fee_rate: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["fee_rate", b"fee_rate", "short_response", b"short_response"]) -> None: ...

global___FinalizeBatchRequest = FinalizeBatchRequest

@typing_extensions.final
class FinalizeBatchResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BATCH_FIELD_NUMBER: builtins.int
    @property
    def batch(self) -> global___MintingBatch:
        """The finalized batch."""
    def __init__(
        self,
        *,
        batch: global___MintingBatch | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["batch", b"batch"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["batch", b"batch"]) -> None: ...

global___FinalizeBatchResponse = FinalizeBatchResponse

@typing_extensions.final
class CancelBatchRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___CancelBatchRequest = CancelBatchRequest

@typing_extensions.final
class CancelBatchResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BATCH_KEY_FIELD_NUMBER: builtins.int
    batch_key: builtins.bytes
    """The internal public key of the batch."""
    def __init__(
        self,
        *,
        batch_key: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["batch_key", b"batch_key"]) -> None: ...

global___CancelBatchResponse = CancelBatchResponse

@typing_extensions.final
class ListBatchRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BATCH_KEY_FIELD_NUMBER: builtins.int
    BATCH_KEY_STR_FIELD_NUMBER: builtins.int
    batch_key: builtins.bytes
    """The optional batch key of the batch to list, specified as raw bytes
    (gRPC only).
    """
    batch_key_str: builtins.str
    """The optional batch key of the batch to list, specified as a hex
    encoded string (use this for REST).
    """
    def __init__(
        self,
        *,
        batch_key: builtins.bytes = ...,
        batch_key_str: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["batch_key", b"batch_key", "batch_key_str", b"batch_key_str", "filter", b"filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["batch_key", b"batch_key", "batch_key_str", b"batch_key_str", "filter", b"filter"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["filter", b"filter"]) -> typing_extensions.Literal["batch_key", "batch_key_str"] | None: ...

global___ListBatchRequest = ListBatchRequest

@typing_extensions.final
class ListBatchResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BATCHES_FIELD_NUMBER: builtins.int
    @property
    def batches(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MintingBatch]: ...
    def __init__(
        self,
        *,
        batches: collections.abc.Iterable[global___MintingBatch] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["batches", b"batches"]) -> None: ...

global___ListBatchResponse = ListBatchResponse
