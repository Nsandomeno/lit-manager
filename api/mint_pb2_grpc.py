# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import api

import api.mint_pb2 as mint__pb2


class MintStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MintAsset = channel.unary_unary(
                '/mintrpc.Mint/MintAsset',
                request_serializer=mint__pb2.MintAssetRequest.SerializeToString,
                response_deserializer=mint__pb2.MintAssetResponse.FromString,
                )
        self.FinalizeBatch = channel.unary_unary(
                '/mintrpc.Mint/FinalizeBatch',
                request_serializer=mint__pb2.FinalizeBatchRequest.SerializeToString,
                response_deserializer=mint__pb2.FinalizeBatchResponse.FromString,
                )
        self.CancelBatch = channel.unary_unary(
                '/mintrpc.Mint/CancelBatch',
                request_serializer=mint__pb2.CancelBatchRequest.SerializeToString,
                response_deserializer=mint__pb2.CancelBatchResponse.FromString,
                )
        self.ListBatches = channel.unary_unary(
                '/mintrpc.Mint/ListBatches',
                request_serializer=mint__pb2.ListBatchRequest.SerializeToString,
                response_deserializer=mint__pb2.ListBatchResponse.FromString,
                )


class MintServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MintAsset(self, request, context):
        """tapcli: `assets mint`
        MintAsset will attempt to mint the set of assets (async by default to
        ensure proper batching) specified in the request. The pending batch is
        returned that shows the other pending assets that are part of the next
        batch. This call will block until the operation succeeds (asset is staged
        in the batch) or fails.
        """
        context.set_code(api.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinalizeBatch(self, request, context):
        """tapcli: `assets mint finalize`
        FinalizeBatch will attempt to finalize the current pending batch.
        """
        context.set_code(api.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelBatch(self, request, context):
        """tapcli: `assets mint cancel`
        CancelBatch will attempt to cancel the current pending batch.
        """
        context.set_code(api.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBatches(self, request, context):
        """tapcli: `assets mint batches`
        ListBatches lists the set of batches submitted to the daemon, including
        pending and cancelled batches.
        """
        context.set_code(api.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MintServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MintAsset': api.unary_unary_rpc_method_handler(
                    servicer.MintAsset,
                    request_deserializer=mint__pb2.MintAssetRequest.FromString,
                    response_serializer=mint__pb2.MintAssetResponse.SerializeToString,
            ),
            'FinalizeBatch': api.unary_unary_rpc_method_handler(
                    servicer.FinalizeBatch,
                    request_deserializer=mint__pb2.FinalizeBatchRequest.FromString,
                    response_serializer=mint__pb2.FinalizeBatchResponse.SerializeToString,
            ),
            'CancelBatch': api.unary_unary_rpc_method_handler(
                    servicer.CancelBatch,
                    request_deserializer=mint__pb2.CancelBatchRequest.FromString,
                    response_serializer=mint__pb2.CancelBatchResponse.SerializeToString,
            ),
            'ListBatches': api.unary_unary_rpc_method_handler(
                    servicer.ListBatches,
                    request_deserializer=mint__pb2.ListBatchRequest.FromString,
                    response_serializer=mint__pb2.ListBatchResponse.SerializeToString,
            ),
    }
    generic_handler = api.method_handlers_generic_handler(
            'mintrpc.Mint', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mint(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MintAsset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return api.experimental.unary_unary(request, target, '/mintrpc.Mint/MintAsset',
            mint__pb2.MintAssetRequest.SerializeToString,
            mint__pb2.MintAssetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinalizeBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return api.experimental.unary_unary(request, target, '/mintrpc.Mint/FinalizeBatch',
            mint__pb2.FinalizeBatchRequest.SerializeToString,
            mint__pb2.FinalizeBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return api.experimental.unary_unary(request, target, '/mintrpc.Mint/CancelBatch',
            mint__pb2.CancelBatchRequest.SerializeToString,
            mint__pb2.CancelBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBatches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return api.experimental.unary_unary(request, target, '/mintrpc.Mint/ListBatches',
            mint__pb2.ListBatchRequest.SerializeToString,
            mint__pb2.ListBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
