# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import assetwallet_pb2 as assetwallet__pb2
from . import taprootassets_pb2 as taprootassets__pb2


class AssetWalletStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FundVirtualPsbt = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/FundVirtualPsbt',
                request_serializer=assetwallet__pb2.FundVirtualPsbtRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.FundVirtualPsbtResponse.FromString,
                )
        self.SignVirtualPsbt = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/SignVirtualPsbt',
                request_serializer=assetwallet__pb2.SignVirtualPsbtRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.SignVirtualPsbtResponse.FromString,
                )
        self.AnchorVirtualPsbts = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/AnchorVirtualPsbts',
                request_serializer=assetwallet__pb2.AnchorVirtualPsbtsRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.SendAssetResponse.FromString,
                )
        self.NextInternalKey = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/NextInternalKey',
                request_serializer=assetwallet__pb2.NextInternalKeyRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.NextInternalKeyResponse.FromString,
                )
        self.NextScriptKey = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/NextScriptKey',
                request_serializer=assetwallet__pb2.NextScriptKeyRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.NextScriptKeyResponse.FromString,
                )
        self.ProveAssetOwnership = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/ProveAssetOwnership',
                request_serializer=assetwallet__pb2.ProveAssetOwnershipRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.ProveAssetOwnershipResponse.FromString,
                )
        self.VerifyAssetOwnership = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/VerifyAssetOwnership',
                request_serializer=assetwallet__pb2.VerifyAssetOwnershipRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.VerifyAssetOwnershipResponse.FromString,
                )
        self.RemoveUTXOLease = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/RemoveUTXOLease',
                request_serializer=assetwallet__pb2.RemoveUTXOLeaseRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.RemoveUTXOLeaseResponse.FromString,
                )


class AssetWalletServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FundVirtualPsbt(self, request, context):
        """
        FundVirtualPsbt selects inputs from the available asset commitments to fund
        a virtual transaction matching the template.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignVirtualPsbt(self, request, context):
        """
        SignVirtualPsbt signs the inputs of a virtual transaction and prepares the
        commitments of the inputs and outputs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnchorVirtualPsbts(self, request, context):
        """
        AnchorVirtualPsbts merges and then commits multiple virtual transactions in
        a single BTC level anchor transaction.

        TODO(guggero): Actually implement accepting and merging multiple
        transactions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NextInternalKey(self, request, context):
        """
        NextInternalKey derives the next internal key for the given key family and
        stores it as an internal key in the database to make sure it is identified
        as a local key later on when importing proofs. While an internal key can
        also be used as the internal key of a script key, it is recommended to use
        the NextScriptKey RPC instead, to make sure the tweaked Taproot output key
        is also recognized as a local key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NextScriptKey(self, request, context):
        """
        NextScriptKey derives the next script key (and its corresponding internal
        key) and stores them both in the database to make sure they are identified
        as local keys later on when importing proofs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProveAssetOwnership(self, request, context):
        """
        ProveAssetOwnership creates an ownership proof embedded in an asset
        transition proof. That ownership proof is a signed virtual transaction
        spending the asset with a valid witness to prove the prover owns the keys
        that can spend the asset.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyAssetOwnership(self, request, context):
        """
        VerifyAssetOwnership verifies the asset ownership proof embedded in the
        given transition proof of an asset and returns true if the proof is valid.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveUTXOLease(self, request, context):
        """
        RemoveUTXOLease removes the lease/lock/reservation of the given managed
        UTXO.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AssetWalletServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FundVirtualPsbt': grpc.unary_unary_rpc_method_handler(
                    servicer.FundVirtualPsbt,
                    request_deserializer=assetwallet__pb2.FundVirtualPsbtRequest.FromString,
                    response_serializer=assetwallet__pb2.FundVirtualPsbtResponse.SerializeToString,
            ),
            'SignVirtualPsbt': grpc.unary_unary_rpc_method_handler(
                    servicer.SignVirtualPsbt,
                    request_deserializer=assetwallet__pb2.SignVirtualPsbtRequest.FromString,
                    response_serializer=assetwallet__pb2.SignVirtualPsbtResponse.SerializeToString,
            ),
            'AnchorVirtualPsbts': grpc.unary_unary_rpc_method_handler(
                    servicer.AnchorVirtualPsbts,
                    request_deserializer=assetwallet__pb2.AnchorVirtualPsbtsRequest.FromString,
                    response_serializer=taprootassets__pb2.SendAssetResponse.SerializeToString,
            ),
            'NextInternalKey': grpc.unary_unary_rpc_method_handler(
                    servicer.NextInternalKey,
                    request_deserializer=assetwallet__pb2.NextInternalKeyRequest.FromString,
                    response_serializer=assetwallet__pb2.NextInternalKeyResponse.SerializeToString,
            ),
            'NextScriptKey': grpc.unary_unary_rpc_method_handler(
                    servicer.NextScriptKey,
                    request_deserializer=assetwallet__pb2.NextScriptKeyRequest.FromString,
                    response_serializer=assetwallet__pb2.NextScriptKeyResponse.SerializeToString,
            ),
            'ProveAssetOwnership': grpc.unary_unary_rpc_method_handler(
                    servicer.ProveAssetOwnership,
                    request_deserializer=assetwallet__pb2.ProveAssetOwnershipRequest.FromString,
                    response_serializer=assetwallet__pb2.ProveAssetOwnershipResponse.SerializeToString,
            ),
            'VerifyAssetOwnership': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyAssetOwnership,
                    request_deserializer=assetwallet__pb2.VerifyAssetOwnershipRequest.FromString,
                    response_serializer=assetwallet__pb2.VerifyAssetOwnershipResponse.SerializeToString,
            ),
            'RemoveUTXOLease': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveUTXOLease,
                    request_deserializer=assetwallet__pb2.RemoveUTXOLeaseRequest.FromString,
                    response_serializer=assetwallet__pb2.RemoveUTXOLeaseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'assetwalletrpc.AssetWallet', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AssetWallet(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FundVirtualPsbt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/FundVirtualPsbt',
            assetwallet__pb2.FundVirtualPsbtRequest.SerializeToString,
            assetwallet__pb2.FundVirtualPsbtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignVirtualPsbt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/SignVirtualPsbt',
            assetwallet__pb2.SignVirtualPsbtRequest.SerializeToString,
            assetwallet__pb2.SignVirtualPsbtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AnchorVirtualPsbts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/AnchorVirtualPsbts',
            assetwallet__pb2.AnchorVirtualPsbtsRequest.SerializeToString,
            taprootassets__pb2.SendAssetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NextInternalKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/NextInternalKey',
            assetwallet__pb2.NextInternalKeyRequest.SerializeToString,
            assetwallet__pb2.NextInternalKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NextScriptKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/NextScriptKey',
            assetwallet__pb2.NextScriptKeyRequest.SerializeToString,
            assetwallet__pb2.NextScriptKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProveAssetOwnership(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/ProveAssetOwnership',
            assetwallet__pb2.ProveAssetOwnershipRequest.SerializeToString,
            assetwallet__pb2.ProveAssetOwnershipResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyAssetOwnership(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/VerifyAssetOwnership',
            assetwallet__pb2.VerifyAssetOwnershipRequest.SerializeToString,
            assetwallet__pb2.VerifyAssetOwnershipResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveUTXOLease(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/RemoveUTXOLease',
            assetwallet__pb2.RemoveUTXOLeaseRequest.SerializeToString,
            assetwallet__pb2.RemoveUTXOLeaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
